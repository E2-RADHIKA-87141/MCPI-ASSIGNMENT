
lcd_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001120  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080012b0  080012b0  000022b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001488  08001488  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001488  08001488  00002488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001490  08001490  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001490  08001490  00002490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001494  08001494  00002494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001498  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000168  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00003050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f10  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050d  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000044a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bc  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018442  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018a3  00000000  00000000  0001cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd4e  00000000  00000000  0001e361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa0af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000970  00000000  00000000  000aa0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aaa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  000aaa83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001298 	.word	0x08001298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08001298 	.word	0x08001298

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LedInit>:

#include "led.h"
#include "stm32f4xx.h"

void LedInit(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <LedInit+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <LedInit+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    // Set GPIO pins to output mode
    GPIO_LED->MODER &= ~(BV(RED_LED_PIN*2) | BV(BLUE_LED_PIN*2));
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <LedInit+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <LedInit+0x38>)
 8000296:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800029a:	6013      	str	r3, [r2, #0]
    GPIO_LED->MODER |= (BV(RED_LED_PIN*2+1) | BV(BLUE_LED_PIN*2+1));
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <LedInit+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <LedInit+0x38>)
 80002a2:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <turn_on_red_led>:

void turn_on_red_led(void) {
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    GPIO_LED->BSRR = (1 << RED_LED_PIN);
 80002c0:	4b03      	ldr	r3, [pc, #12]	@ (80002d0 <turn_on_red_led+0x14>)
 80002c2:	2220      	movs	r2, #32
 80002c4:	619a      	str	r2, [r3, #24]
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40020000 	.word	0x40020000

080002d4 <turn_off_red_led>:

void turn_off_red_led(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    GPIO_LED->BSRR = (1 << (RED_LED_PIN + 16));
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <turn_off_red_led+0x18>)
 80002da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002de:	619a      	str	r2, [r3, #24]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020000 	.word	0x40020000

080002f0 <turn_on_blue_led>:

void turn_on_blue_led(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    GPIO_LED->BSRR = (1 << BLUE_LED_PIN);
 80002f4:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <turn_on_blue_led+0x14>)
 80002f6:	2240      	movs	r2, #64	@ 0x40
 80002f8:	619a      	str	r2, [r3, #24]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40020000 	.word	0x40020000

08000308 <turn_off_blue_led>:

void turn_off_blue_led(void) {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    GPIO_LED->BSRR = (1 << (BLUE_LED_PIN + 16));
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <turn_off_blue_led+0x18>)
 800030e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000312:	619a      	str	r2, [r3, #24]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000

08000324 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "led.h"
#include "uart.h"
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08a      	sub	sp, #40	@ 0x28
 8000328:	af00      	add	r7, sp, #0
   SystemInit();
 800032a:	f000 f89f 	bl	800046c <SystemInit>
   UartInit(9600);
 800032e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000332:	f000 f8d1 	bl	80004d8 <UartInit>
   LedInit();
 8000336:	f7ff ffa3 	bl	8000280 <LedInit>
   char str[32];
   int choice;
   while(1)
   {
	   UartPuts("MENU\r\n");
 800033a:	4825      	ldr	r0, [pc, #148]	@ (80003d0 <main+0xac>)
 800033c:	f000 f91c 	bl	8000578 <UartPuts>
	   UartPuts("1. Red Led On\r\n");
 8000340:	4824      	ldr	r0, [pc, #144]	@ (80003d4 <main+0xb0>)
 8000342:	f000 f919 	bl	8000578 <UartPuts>
	   UartPuts("2. Red Led Off\r\n");
 8000346:	4824      	ldr	r0, [pc, #144]	@ (80003d8 <main+0xb4>)
 8000348:	f000 f916 	bl	8000578 <UartPuts>
	   UartPuts("3. Blue Led On\r\n");
 800034c:	4823      	ldr	r0, [pc, #140]	@ (80003dc <main+0xb8>)
 800034e:	f000 f913 	bl	8000578 <UartPuts>
	   UartPuts("4. Blue Led Off\r\n");
 8000352:	4823      	ldr	r0, [pc, #140]	@ (80003e0 <main+0xbc>)
 8000354:	f000 f910 	bl	8000578 <UartPuts>
	   UartPuts("Enter Choice: ");
 8000358:	4822      	ldr	r0, [pc, #136]	@ (80003e4 <main+0xc0>)
 800035a:	f000 f90d 	bl	8000578 <UartPuts>

	   UartGets(str);
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f932 	bl	80005cc <UartGets>
	   sscanf(str, "%d", &choice);
 8000368:	1d3a      	adds	r2, r7, #4
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	491e      	ldr	r1, [pc, #120]	@ (80003e8 <main+0xc4>)
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f973 	bl	800065c <siscanf>

	   switch(choice)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3b01      	subs	r3, #1
 800037a:	2b03      	cmp	r3, #3
 800037c:	d822      	bhi.n	80003c4 <main+0xa0>
 800037e:	a201      	add	r2, pc, #4	@ (adr r2, 8000384 <main+0x60>)
 8000380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000384:	08000395 	.word	0x08000395
 8000388:	080003a1 	.word	0x080003a1
 800038c:	080003ad 	.word	0x080003ad
 8000390:	080003b9 	.word	0x080003b9
	   {
	   	   case 1:	turn_on_red_led();
 8000394:	f7ff ff92 	bl	80002bc <turn_on_red_led>
	   	   	   	    UartPuts("Red Led On");
 8000398:	4814      	ldr	r0, [pc, #80]	@ (80003ec <main+0xc8>)
 800039a:	f000 f8ed 	bl	8000578 <UartPuts>
	   	   	   	   	break;
 800039e:	e015      	b.n	80003cc <main+0xa8>
	   	   case 2:	turn_off_red_led();
 80003a0:	f7ff ff98 	bl	80002d4 <turn_off_red_led>
	   	   	    	UartPuts("Red Led Off");
 80003a4:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <main+0xcc>)
 80003a6:	f000 f8e7 	bl	8000578 <UartPuts>
	   	   	   	   	break;
 80003aa:	e00f      	b.n	80003cc <main+0xa8>
	   	   case 3:	turn_on_blue_led();
 80003ac:	f7ff ffa0 	bl	80002f0 <turn_on_blue_led>
	   	  	   	    UartPuts("Blue Led On");
 80003b0:	4810      	ldr	r0, [pc, #64]	@ (80003f4 <main+0xd0>)
 80003b2:	f000 f8e1 	bl	8000578 <UartPuts>
	   	   	   	   	break;
 80003b6:	e009      	b.n	80003cc <main+0xa8>
	   	   case 4:	turn_off_blue_led();
 80003b8:	f7ff ffa6 	bl	8000308 <turn_off_blue_led>
	   	   	   	    UartPuts("Blue Led Off");
 80003bc:	480e      	ldr	r0, [pc, #56]	@ (80003f8 <main+0xd4>)
 80003be:	f000 f8db 	bl	8000578 <UartPuts>
	   		   	  	break;
 80003c2:	e003      	b.n	80003cc <main+0xa8>
	   	   default: UartPuts("invalid Choice");
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <main+0xd8>)
 80003c6:	f000 f8d7 	bl	8000578 <UartPuts>
	   	   	   	   	break;
 80003ca:	bf00      	nop
	   UartPuts("MENU\r\n");
 80003cc:	e7b5      	b.n	800033a <main+0x16>
 80003ce:	bf00      	nop
 80003d0:	080012b0 	.word	0x080012b0
 80003d4:	080012b8 	.word	0x080012b8
 80003d8:	080012c8 	.word	0x080012c8
 80003dc:	080012dc 	.word	0x080012dc
 80003e0:	080012f0 	.word	0x080012f0
 80003e4:	08001304 	.word	0x08001304
 80003e8:	08001314 	.word	0x08001314
 80003ec:	08001318 	.word	0x08001318
 80003f0:	08001324 	.word	0x08001324
 80003f4:	08001330 	.word	0x08001330
 80003f8:	0800133c 	.word	0x0800133c
 80003fc:	0800134c 	.word	0x0800134c

08000400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000408:	4a14      	ldr	r2, [pc, #80]	@ (800045c <_sbrk+0x5c>)
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <_sbrk+0x60>)
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000414:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d102      	bne.n	8000422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <_sbrk+0x64>)
 800041e:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <_sbrk+0x68>)
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <_sbrk+0x64>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	d207      	bcs.n	8000440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000430:	f000 f940 	bl	80006b4 <__errno>
 8000434:	4603      	mov	r3, r0
 8000436:	220c      	movs	r2, #12
 8000438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800043e:	e009      	b.n	8000454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <_sbrk+0x64>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000446:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <_sbrk+0x64>)
 8000450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20020000 	.word	0x20020000
 8000460:	00000400 	.word	0x00000400
 8000464:	2000006c 	.word	0x2000006c
 8000468:	200001b8 	.word	0x200001b8

0800046c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000470:	f000 f802 	bl	8000478 <DWT_Init>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <DWT_Init+0x58>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <DWT_Init+0x58>)
 8000482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000486:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <DWT_Init+0x58>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a10      	ldr	r2, [pc, #64]	@ (80004d0 <DWT_Init+0x58>)
 800048e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000492:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <DWT_Init+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <DWT_Init+0x5c>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <DWT_Init+0x5c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	@ (80004d4 <DWT_Init+0x5c>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <DWT_Init+0x5c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004b2:	bf00      	nop
    __ASM volatile ("NOP");
 80004b4:	bf00      	nop
    __ASM volatile ("NOP");
 80004b6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <DWT_Init+0x5c>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	bf0c      	ite	eq
 80004c0:	2301      	moveq	r3, #1
 80004c2:	2300      	movne	r3, #0
 80004c4:	b2db      	uxtb	r3, r3
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	e000edf0 	.word	0xe000edf0
 80004d4:	e0001000 	.word	0xe0001000

080004d8 <UartInit>:
#include "uart.h"
#include "stm32f4xx.h"

void UartInit(uint32_t baud) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    // Enable UART clock
    RCC->APB1ENR |= BV(UART_CLKEN);
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <UartInit+0x64>)
 80004e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004e4:	4a15      	ldr	r2, [pc, #84]	@ (800053c <UartInit+0x64>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ea:	6413      	str	r3, [r2, #64]	@ 0x40
    // Set UART pins to alternate function mode
    GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 80004ec:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <UartInit+0x68>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <UartInit+0x68>)
 80004f2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004f6:	6013      	str	r3, [r2, #0]
    GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <UartInit+0x68>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <UartInit+0x68>)
 80004fe:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000502:	6013      	str	r3, [r2, #0]
    // Initialize UART registers
    USART2->BRR = baud;
 8000504:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <UartInit+0x6c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_UE; // Enable USART
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <UartInit+0x6c>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <UartInit+0x6c>)
 8000510:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000514:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_TE; // Enable transmitter
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <UartInit+0x6c>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <UartInit+0x6c>)
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_RE; // Enable receiver
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <UartInit+0x6c>)
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <UartInit+0x6c>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	60d3      	str	r3, [r2, #12]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800
 8000540:	40020000 	.word	0x40020000
 8000544:	40004400 	.word	0x40004400

08000548 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Wait for transmit data register empty
 8000552:	bf00      	nop
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <UartPutch+0x2c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <UartPutch+0xc>
    USART2->DR = ch;
 8000560:	4a04      	ldr	r2, [pc, #16]	@ (8000574 <UartPutch+0x2c>)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	6053      	str	r3, [r2, #4]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40004400 	.word	0x40004400

08000578 <UartPuts>:

void UartPuts(char str[]) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000580:	e006      	b.n	8000590 <UartPuts+0x18>
        UartPutch(*str++);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffdc 	bl	8000548 <UartPutch>
    while (*str) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f4      	bne.n	8000582 <UartPuts+0xa>
    }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <UartGetch>:

uint8_t UartGetch(void) {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)); // Wait for read data register not empty
 80005a8:	bf00      	nop
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <UartGetch+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <UartGetch+0x6>
    return USART2->DR;
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <UartGetch+0x24>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	b2db      	uxtb	r3, r3
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40004400 	.word	0x40004400

080005cc <UartGets>:

void UartGets(char str[]) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    while (1) {
        *str = UartGetch();
 80005d4:	f7ff ffe6 	bl	80005a4 <UartGetch>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	701a      	strb	r2, [r3, #0]
        if (*str == '\r' || *str == '\n') {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b0d      	cmp	r3, #13
 80005e6:	d003      	beq.n	80005f0 <UartGets+0x24>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d103      	bne.n	80005f8 <UartGets+0x2c>
            *str = '\0';
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
            break;
 80005f6:	e003      	b.n	8000600 <UartGets+0x34>
        }
        str++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
        *str = UartGetch();
 80005fe:	e7e9      	b.n	80005d4 <UartGets+0x8>
    }
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff ff2e 	bl	800046c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	@ (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	@ (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f843 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe73 	bl	8000324 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800064c:	08001498 	.word	0x08001498
  ldr r2, =_sbss
 8000650:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000654:	200001b8 	.word	0x200001b8

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <siscanf>:
 800065c:	b40e      	push	{r1, r2, r3}
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	b09c      	sub	sp, #112	@ 0x70
 8000662:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000664:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000668:	f854 5b04 	ldr.w	r5, [r4], #4
 800066c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000670:	9002      	str	r0, [sp, #8]
 8000672:	9006      	str	r0, [sp, #24]
 8000674:	f7ff fdac 	bl	80001d0 <strlen>
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <siscanf+0x4c>)
 800067a:	9003      	str	r0, [sp, #12]
 800067c:	9007      	str	r0, [sp, #28]
 800067e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <siscanf+0x50>)
 8000682:	9401      	str	r4, [sp, #4]
 8000684:	2300      	movs	r3, #0
 8000686:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000688:	9314      	str	r3, [sp, #80]	@ 0x50
 800068a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800068e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000692:	462a      	mov	r2, r5
 8000694:	4623      	mov	r3, r4
 8000696:	a902      	add	r1, sp, #8
 8000698:	6800      	ldr	r0, [r0, #0]
 800069a:	f000 f987 	bl	80009ac <__ssvfiscanf_r>
 800069e:	b01c      	add	sp, #112	@ 0x70
 80006a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80006a4:	b003      	add	sp, #12
 80006a6:	4770      	bx	lr
 80006a8:	080006b1 	.word	0x080006b1
 80006ac:	20000000 	.word	0x20000000

080006b0 <__seofread>:
 80006b0:	2000      	movs	r0, #0
 80006b2:	4770      	bx	lr

080006b4 <__errno>:
 80006b4:	4b01      	ldr	r3, [pc, #4]	@ (80006bc <__errno+0x8>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	@ (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	@ (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 fde0 	bl	8001298 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08001490 	.word	0x08001490
 80006fc:	08001490 	.word	0x08001490
 8000700:	08001490 	.word	0x08001490
 8000704:	08001494 	.word	0x08001494

08000708 <__retarget_lock_acquire_recursive>:
 8000708:	4770      	bx	lr

0800070a <__retarget_lock_release_recursive>:
 800070a:	4770      	bx	lr

0800070c <_free_r>:
 800070c:	b538      	push	{r3, r4, r5, lr}
 800070e:	4605      	mov	r5, r0
 8000710:	2900      	cmp	r1, #0
 8000712:	d041      	beq.n	8000798 <_free_r+0x8c>
 8000714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000718:	1f0c      	subs	r4, r1, #4
 800071a:	2b00      	cmp	r3, #0
 800071c:	bfb8      	it	lt
 800071e:	18e4      	addlt	r4, r4, r3
 8000720:	f000 f8e0 	bl	80008e4 <__malloc_lock>
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <_free_r+0x90>)
 8000726:	6813      	ldr	r3, [r2, #0]
 8000728:	b933      	cbnz	r3, 8000738 <_free_r+0x2c>
 800072a:	6063      	str	r3, [r4, #4]
 800072c:	6014      	str	r4, [r2, #0]
 800072e:	4628      	mov	r0, r5
 8000730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000734:	f000 b8dc 	b.w	80008f0 <__malloc_unlock>
 8000738:	42a3      	cmp	r3, r4
 800073a:	d908      	bls.n	800074e <_free_r+0x42>
 800073c:	6820      	ldr	r0, [r4, #0]
 800073e:	1821      	adds	r1, r4, r0
 8000740:	428b      	cmp	r3, r1
 8000742:	bf01      	itttt	eq
 8000744:	6819      	ldreq	r1, [r3, #0]
 8000746:	685b      	ldreq	r3, [r3, #4]
 8000748:	1809      	addeq	r1, r1, r0
 800074a:	6021      	streq	r1, [r4, #0]
 800074c:	e7ed      	b.n	800072a <_free_r+0x1e>
 800074e:	461a      	mov	r2, r3
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	b10b      	cbz	r3, 8000758 <_free_r+0x4c>
 8000754:	42a3      	cmp	r3, r4
 8000756:	d9fa      	bls.n	800074e <_free_r+0x42>
 8000758:	6811      	ldr	r1, [r2, #0]
 800075a:	1850      	adds	r0, r2, r1
 800075c:	42a0      	cmp	r0, r4
 800075e:	d10b      	bne.n	8000778 <_free_r+0x6c>
 8000760:	6820      	ldr	r0, [r4, #0]
 8000762:	4401      	add	r1, r0
 8000764:	1850      	adds	r0, r2, r1
 8000766:	4283      	cmp	r3, r0
 8000768:	6011      	str	r1, [r2, #0]
 800076a:	d1e0      	bne.n	800072e <_free_r+0x22>
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	6053      	str	r3, [r2, #4]
 8000772:	4408      	add	r0, r1
 8000774:	6010      	str	r0, [r2, #0]
 8000776:	e7da      	b.n	800072e <_free_r+0x22>
 8000778:	d902      	bls.n	8000780 <_free_r+0x74>
 800077a:	230c      	movs	r3, #12
 800077c:	602b      	str	r3, [r5, #0]
 800077e:	e7d6      	b.n	800072e <_free_r+0x22>
 8000780:	6820      	ldr	r0, [r4, #0]
 8000782:	1821      	adds	r1, r4, r0
 8000784:	428b      	cmp	r3, r1
 8000786:	bf04      	itt	eq
 8000788:	6819      	ldreq	r1, [r3, #0]
 800078a:	685b      	ldreq	r3, [r3, #4]
 800078c:	6063      	str	r3, [r4, #4]
 800078e:	bf04      	itt	eq
 8000790:	1809      	addeq	r1, r1, r0
 8000792:	6021      	streq	r1, [r4, #0]
 8000794:	6054      	str	r4, [r2, #4]
 8000796:	e7ca      	b.n	800072e <_free_r+0x22>
 8000798:	bd38      	pop	{r3, r4, r5, pc}
 800079a:	bf00      	nop
 800079c:	200001b4 	.word	0x200001b4

080007a0 <sbrk_aligned>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	4e0f      	ldr	r6, [pc, #60]	@ (80007e0 <sbrk_aligned+0x40>)
 80007a4:	460c      	mov	r4, r1
 80007a6:	6831      	ldr	r1, [r6, #0]
 80007a8:	4605      	mov	r5, r0
 80007aa:	b911      	cbnz	r1, 80007b2 <sbrk_aligned+0x12>
 80007ac:	f000 fc34 	bl	8001018 <_sbrk_r>
 80007b0:	6030      	str	r0, [r6, #0]
 80007b2:	4621      	mov	r1, r4
 80007b4:	4628      	mov	r0, r5
 80007b6:	f000 fc2f 	bl	8001018 <_sbrk_r>
 80007ba:	1c43      	adds	r3, r0, #1
 80007bc:	d103      	bne.n	80007c6 <sbrk_aligned+0x26>
 80007be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80007c2:	4620      	mov	r0, r4
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	1cc4      	adds	r4, r0, #3
 80007c8:	f024 0403 	bic.w	r4, r4, #3
 80007cc:	42a0      	cmp	r0, r4
 80007ce:	d0f8      	beq.n	80007c2 <sbrk_aligned+0x22>
 80007d0:	1a21      	subs	r1, r4, r0
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 fc20 	bl	8001018 <_sbrk_r>
 80007d8:	3001      	adds	r0, #1
 80007da:	d1f2      	bne.n	80007c2 <sbrk_aligned+0x22>
 80007dc:	e7ef      	b.n	80007be <sbrk_aligned+0x1e>
 80007de:	bf00      	nop
 80007e0:	200001b0 	.word	0x200001b0

080007e4 <_malloc_r>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	1ccd      	adds	r5, r1, #3
 80007ea:	f025 0503 	bic.w	r5, r5, #3
 80007ee:	3508      	adds	r5, #8
 80007f0:	2d0c      	cmp	r5, #12
 80007f2:	bf38      	it	cc
 80007f4:	250c      	movcc	r5, #12
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	4606      	mov	r6, r0
 80007fa:	db01      	blt.n	8000800 <_malloc_r+0x1c>
 80007fc:	42a9      	cmp	r1, r5
 80007fe:	d904      	bls.n	800080a <_malloc_r+0x26>
 8000800:	230c      	movs	r3, #12
 8000802:	6033      	str	r3, [r6, #0]
 8000804:	2000      	movs	r0, #0
 8000806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800080a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008e0 <_malloc_r+0xfc>
 800080e:	f000 f869 	bl	80008e4 <__malloc_lock>
 8000812:	f8d8 3000 	ldr.w	r3, [r8]
 8000816:	461c      	mov	r4, r3
 8000818:	bb44      	cbnz	r4, 800086c <_malloc_r+0x88>
 800081a:	4629      	mov	r1, r5
 800081c:	4630      	mov	r0, r6
 800081e:	f7ff ffbf 	bl	80007a0 <sbrk_aligned>
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	4604      	mov	r4, r0
 8000826:	d158      	bne.n	80008da <_malloc_r+0xf6>
 8000828:	f8d8 4000 	ldr.w	r4, [r8]
 800082c:	4627      	mov	r7, r4
 800082e:	2f00      	cmp	r7, #0
 8000830:	d143      	bne.n	80008ba <_malloc_r+0xd6>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d04b      	beq.n	80008ce <_malloc_r+0xea>
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	4639      	mov	r1, r7
 800083a:	4630      	mov	r0, r6
 800083c:	eb04 0903 	add.w	r9, r4, r3
 8000840:	f000 fbea 	bl	8001018 <_sbrk_r>
 8000844:	4581      	cmp	r9, r0
 8000846:	d142      	bne.n	80008ce <_malloc_r+0xea>
 8000848:	6821      	ldr	r1, [r4, #0]
 800084a:	1a6d      	subs	r5, r5, r1
 800084c:	4629      	mov	r1, r5
 800084e:	4630      	mov	r0, r6
 8000850:	f7ff ffa6 	bl	80007a0 <sbrk_aligned>
 8000854:	3001      	adds	r0, #1
 8000856:	d03a      	beq.n	80008ce <_malloc_r+0xea>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	442b      	add	r3, r5
 800085c:	6023      	str	r3, [r4, #0]
 800085e:	f8d8 3000 	ldr.w	r3, [r8]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	bb62      	cbnz	r2, 80008c0 <_malloc_r+0xdc>
 8000866:	f8c8 7000 	str.w	r7, [r8]
 800086a:	e00f      	b.n	800088c <_malloc_r+0xa8>
 800086c:	6822      	ldr	r2, [r4, #0]
 800086e:	1b52      	subs	r2, r2, r5
 8000870:	d420      	bmi.n	80008b4 <_malloc_r+0xd0>
 8000872:	2a0b      	cmp	r2, #11
 8000874:	d917      	bls.n	80008a6 <_malloc_r+0xc2>
 8000876:	1961      	adds	r1, r4, r5
 8000878:	42a3      	cmp	r3, r4
 800087a:	6025      	str	r5, [r4, #0]
 800087c:	bf18      	it	ne
 800087e:	6059      	strne	r1, [r3, #4]
 8000880:	6863      	ldr	r3, [r4, #4]
 8000882:	bf08      	it	eq
 8000884:	f8c8 1000 	streq.w	r1, [r8]
 8000888:	5162      	str	r2, [r4, r5]
 800088a:	604b      	str	r3, [r1, #4]
 800088c:	4630      	mov	r0, r6
 800088e:	f000 f82f 	bl	80008f0 <__malloc_unlock>
 8000892:	f104 000b 	add.w	r0, r4, #11
 8000896:	1d23      	adds	r3, r4, #4
 8000898:	f020 0007 	bic.w	r0, r0, #7
 800089c:	1ac2      	subs	r2, r0, r3
 800089e:	bf1c      	itt	ne
 80008a0:	1a1b      	subne	r3, r3, r0
 80008a2:	50a3      	strne	r3, [r4, r2]
 80008a4:	e7af      	b.n	8000806 <_malloc_r+0x22>
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	bf0c      	ite	eq
 80008ac:	f8c8 2000 	streq.w	r2, [r8]
 80008b0:	605a      	strne	r2, [r3, #4]
 80008b2:	e7eb      	b.n	800088c <_malloc_r+0xa8>
 80008b4:	4623      	mov	r3, r4
 80008b6:	6864      	ldr	r4, [r4, #4]
 80008b8:	e7ae      	b.n	8000818 <_malloc_r+0x34>
 80008ba:	463c      	mov	r4, r7
 80008bc:	687f      	ldr	r7, [r7, #4]
 80008be:	e7b6      	b.n	800082e <_malloc_r+0x4a>
 80008c0:	461a      	mov	r2, r3
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	42a3      	cmp	r3, r4
 80008c6:	d1fb      	bne.n	80008c0 <_malloc_r+0xdc>
 80008c8:	2300      	movs	r3, #0
 80008ca:	6053      	str	r3, [r2, #4]
 80008cc:	e7de      	b.n	800088c <_malloc_r+0xa8>
 80008ce:	230c      	movs	r3, #12
 80008d0:	6033      	str	r3, [r6, #0]
 80008d2:	4630      	mov	r0, r6
 80008d4:	f000 f80c 	bl	80008f0 <__malloc_unlock>
 80008d8:	e794      	b.n	8000804 <_malloc_r+0x20>
 80008da:	6005      	str	r5, [r0, #0]
 80008dc:	e7d6      	b.n	800088c <_malloc_r+0xa8>
 80008de:	bf00      	nop
 80008e0:	200001b4 	.word	0x200001b4

080008e4 <__malloc_lock>:
 80008e4:	4801      	ldr	r0, [pc, #4]	@ (80008ec <__malloc_lock+0x8>)
 80008e6:	f7ff bf0f 	b.w	8000708 <__retarget_lock_acquire_recursive>
 80008ea:	bf00      	nop
 80008ec:	200001ac 	.word	0x200001ac

080008f0 <__malloc_unlock>:
 80008f0:	4801      	ldr	r0, [pc, #4]	@ (80008f8 <__malloc_unlock+0x8>)
 80008f2:	f7ff bf0a 	b.w	800070a <__retarget_lock_release_recursive>
 80008f6:	bf00      	nop
 80008f8:	200001ac 	.word	0x200001ac

080008fc <_sungetc_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	1c4b      	adds	r3, r1, #1
 8000900:	4614      	mov	r4, r2
 8000902:	d103      	bne.n	800090c <_sungetc_r+0x10>
 8000904:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000908:	4628      	mov	r0, r5
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	8993      	ldrh	r3, [r2, #12]
 800090e:	f023 0320 	bic.w	r3, r3, #32
 8000912:	8193      	strh	r3, [r2, #12]
 8000914:	6853      	ldr	r3, [r2, #4]
 8000916:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000918:	b2cd      	uxtb	r5, r1
 800091a:	b18a      	cbz	r2, 8000940 <_sungetc_r+0x44>
 800091c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800091e:	429a      	cmp	r2, r3
 8000920:	dd08      	ble.n	8000934 <_sungetc_r+0x38>
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	6022      	str	r2, [r4, #0]
 8000928:	f803 5c01 	strb.w	r5, [r3, #-1]
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	6063      	str	r3, [r4, #4]
 8000932:	e7e9      	b.n	8000908 <_sungetc_r+0xc>
 8000934:	4621      	mov	r1, r4
 8000936:	f000 fb34 	bl	8000fa2 <__submore>
 800093a:	2800      	cmp	r0, #0
 800093c:	d0f1      	beq.n	8000922 <_sungetc_r+0x26>
 800093e:	e7e1      	b.n	8000904 <_sungetc_r+0x8>
 8000940:	6921      	ldr	r1, [r4, #16]
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	b141      	cbz	r1, 8000958 <_sungetc_r+0x5c>
 8000946:	4291      	cmp	r1, r2
 8000948:	d206      	bcs.n	8000958 <_sungetc_r+0x5c>
 800094a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800094e:	42a9      	cmp	r1, r5
 8000950:	d102      	bne.n	8000958 <_sungetc_r+0x5c>
 8000952:	3a01      	subs	r2, #1
 8000954:	6022      	str	r2, [r4, #0]
 8000956:	e7ea      	b.n	800092e <_sungetc_r+0x32>
 8000958:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800095c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000960:	6363      	str	r3, [r4, #52]	@ 0x34
 8000962:	2303      	movs	r3, #3
 8000964:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000966:	4623      	mov	r3, r4
 8000968:	f803 5f46 	strb.w	r5, [r3, #70]!
 800096c:	6023      	str	r3, [r4, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	e7de      	b.n	8000930 <_sungetc_r+0x34>

08000972 <__ssrefill_r>:
 8000972:	b510      	push	{r4, lr}
 8000974:	460c      	mov	r4, r1
 8000976:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000978:	b169      	cbz	r1, 8000996 <__ssrefill_r+0x24>
 800097a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800097e:	4299      	cmp	r1, r3
 8000980:	d001      	beq.n	8000986 <__ssrefill_r+0x14>
 8000982:	f7ff fec3 	bl	800070c <_free_r>
 8000986:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000988:	6063      	str	r3, [r4, #4]
 800098a:	2000      	movs	r0, #0
 800098c:	6360      	str	r0, [r4, #52]	@ 0x34
 800098e:	b113      	cbz	r3, 8000996 <__ssrefill_r+0x24>
 8000990:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000992:	6023      	str	r3, [r4, #0]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	6923      	ldr	r3, [r4, #16]
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	6063      	str	r3, [r4, #4]
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	81a3      	strh	r3, [r4, #12]
 80009a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009aa:	e7f3      	b.n	8000994 <__ssrefill_r+0x22>

080009ac <__ssvfiscanf_r>:
 80009ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b0:	460c      	mov	r4, r1
 80009b2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80009b6:	2100      	movs	r1, #0
 80009b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80009bc:	49a5      	ldr	r1, [pc, #660]	@ (8000c54 <__ssvfiscanf_r+0x2a8>)
 80009be:	91a0      	str	r1, [sp, #640]	@ 0x280
 80009c0:	f10d 0804 	add.w	r8, sp, #4
 80009c4:	49a4      	ldr	r1, [pc, #656]	@ (8000c58 <__ssvfiscanf_r+0x2ac>)
 80009c6:	4fa5      	ldr	r7, [pc, #660]	@ (8000c5c <__ssvfiscanf_r+0x2b0>)
 80009c8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80009cc:	4606      	mov	r6, r0
 80009ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	7813      	ldrb	r3, [r2, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 8158 	beq.w	8000c8a <__ssvfiscanf_r+0x2de>
 80009da:	5cf9      	ldrb	r1, [r7, r3]
 80009dc:	f011 0108 	ands.w	r1, r1, #8
 80009e0:	f102 0501 	add.w	r5, r2, #1
 80009e4:	d019      	beq.n	8000a1a <__ssvfiscanf_r+0x6e>
 80009e6:	6863      	ldr	r3, [r4, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dd0f      	ble.n	8000a0c <__ssvfiscanf_r+0x60>
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	5cba      	ldrb	r2, [r7, r2]
 80009f2:	0712      	lsls	r2, r2, #28
 80009f4:	d401      	bmi.n	80009fa <__ssvfiscanf_r+0x4e>
 80009f6:	462a      	mov	r2, r5
 80009f8:	e7eb      	b.n	80009d2 <__ssvfiscanf_r+0x26>
 80009fa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80009fc:	3201      	adds	r2, #1
 80009fe:	9245      	str	r2, [sp, #276]	@ 0x114
 8000a00:	6862      	ldr	r2, [r4, #4]
 8000a02:	3301      	adds	r3, #1
 8000a04:	3a01      	subs	r2, #1
 8000a06:	6062      	str	r2, [r4, #4]
 8000a08:	6023      	str	r3, [r4, #0]
 8000a0a:	e7ec      	b.n	80009e6 <__ssvfiscanf_r+0x3a>
 8000a0c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000a0e:	4621      	mov	r1, r4
 8000a10:	4630      	mov	r0, r6
 8000a12:	4798      	blx	r3
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d0e9      	beq.n	80009ec <__ssvfiscanf_r+0x40>
 8000a18:	e7ed      	b.n	80009f6 <__ssvfiscanf_r+0x4a>
 8000a1a:	2b25      	cmp	r3, #37	@ 0x25
 8000a1c:	d012      	beq.n	8000a44 <__ssvfiscanf_r+0x98>
 8000a1e:	4699      	mov	r9, r3
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f340 8093 	ble.w	8000b4e <__ssvfiscanf_r+0x1a2>
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	7813      	ldrb	r3, [r2, #0]
 8000a2c:	454b      	cmp	r3, r9
 8000a2e:	f040 812c 	bne.w	8000c8a <__ssvfiscanf_r+0x2de>
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000a3a:	3201      	adds	r2, #1
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	6022      	str	r2, [r4, #0]
 8000a40:	9345      	str	r3, [sp, #276]	@ 0x114
 8000a42:	e7d8      	b.n	80009f6 <__ssvfiscanf_r+0x4a>
 8000a44:	9141      	str	r1, [sp, #260]	@ 0x104
 8000a46:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000a48:	7853      	ldrb	r3, [r2, #1]
 8000a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a4c:	bf02      	ittt	eq
 8000a4e:	2310      	moveq	r3, #16
 8000a50:	1c95      	addeq	r5, r2, #2
 8000a52:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000a54:	220a      	movs	r2, #10
 8000a56:	46a9      	mov	r9, r5
 8000a58:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000a5c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d91e      	bls.n	8000aa2 <__ssvfiscanf_r+0xf6>
 8000a64:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000c60 <__ssvfiscanf_r+0x2b4>
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4650      	mov	r0, sl
 8000a6c:	f7ff fbb8 	bl	80001e0 <memchr>
 8000a70:	b138      	cbz	r0, 8000a82 <__ssvfiscanf_r+0xd6>
 8000a72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000a74:	eba0 000a 	sub.w	r0, r0, sl
 8000a78:	2301      	movs	r3, #1
 8000a7a:	4083      	lsls	r3, r0
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	9341      	str	r3, [sp, #260]	@ 0x104
 8000a80:	464d      	mov	r5, r9
 8000a82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000a86:	2b78      	cmp	r3, #120	@ 0x78
 8000a88:	d806      	bhi.n	8000a98 <__ssvfiscanf_r+0xec>
 8000a8a:	2b57      	cmp	r3, #87	@ 0x57
 8000a8c:	d810      	bhi.n	8000ab0 <__ssvfiscanf_r+0x104>
 8000a8e:	2b25      	cmp	r3, #37	@ 0x25
 8000a90:	d0c5      	beq.n	8000a1e <__ssvfiscanf_r+0x72>
 8000a92:	d857      	bhi.n	8000b44 <__ssvfiscanf_r+0x198>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d065      	beq.n	8000b64 <__ssvfiscanf_r+0x1b8>
 8000a98:	2303      	movs	r3, #3
 8000a9a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000aa0:	e078      	b.n	8000b94 <__ssvfiscanf_r+0x1e8>
 8000aa2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000aa4:	fb02 1103 	mla	r1, r2, r3, r1
 8000aa8:	3930      	subs	r1, #48	@ 0x30
 8000aaa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000aac:	464d      	mov	r5, r9
 8000aae:	e7d2      	b.n	8000a56 <__ssvfiscanf_r+0xaa>
 8000ab0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000ab4:	2a20      	cmp	r2, #32
 8000ab6:	d8ef      	bhi.n	8000a98 <__ssvfiscanf_r+0xec>
 8000ab8:	a101      	add	r1, pc, #4	@ (adr r1, 8000ac0 <__ssvfiscanf_r+0x114>)
 8000aba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000b73 	.word	0x08000b73
 8000ac4:	08000a99 	.word	0x08000a99
 8000ac8:	08000a99 	.word	0x08000a99
 8000acc:	08000bcd 	.word	0x08000bcd
 8000ad0:	08000a99 	.word	0x08000a99
 8000ad4:	08000a99 	.word	0x08000a99
 8000ad8:	08000a99 	.word	0x08000a99
 8000adc:	08000a99 	.word	0x08000a99
 8000ae0:	08000a99 	.word	0x08000a99
 8000ae4:	08000a99 	.word	0x08000a99
 8000ae8:	08000a99 	.word	0x08000a99
 8000aec:	08000be3 	.word	0x08000be3
 8000af0:	08000bc9 	.word	0x08000bc9
 8000af4:	08000b4b 	.word	0x08000b4b
 8000af8:	08000b4b 	.word	0x08000b4b
 8000afc:	08000b4b 	.word	0x08000b4b
 8000b00:	08000a99 	.word	0x08000a99
 8000b04:	08000b85 	.word	0x08000b85
 8000b08:	08000a99 	.word	0x08000a99
 8000b0c:	08000a99 	.word	0x08000a99
 8000b10:	08000a99 	.word	0x08000a99
 8000b14:	08000a99 	.word	0x08000a99
 8000b18:	08000bf3 	.word	0x08000bf3
 8000b1c:	08000b8d 	.word	0x08000b8d
 8000b20:	08000b6b 	.word	0x08000b6b
 8000b24:	08000a99 	.word	0x08000a99
 8000b28:	08000a99 	.word	0x08000a99
 8000b2c:	08000bef 	.word	0x08000bef
 8000b30:	08000a99 	.word	0x08000a99
 8000b34:	08000bc9 	.word	0x08000bc9
 8000b38:	08000a99 	.word	0x08000a99
 8000b3c:	08000a99 	.word	0x08000a99
 8000b40:	08000b73 	.word	0x08000b73
 8000b44:	3b45      	subs	r3, #69	@ 0x45
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d8a6      	bhi.n	8000a98 <__ssvfiscanf_r+0xec>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e021      	b.n	8000b92 <__ssvfiscanf_r+0x1e6>
 8000b4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000b50:	4621      	mov	r1, r4
 8000b52:	4630      	mov	r0, r6
 8000b54:	4798      	blx	r3
 8000b56:	2800      	cmp	r0, #0
 8000b58:	f43f af66 	beq.w	8000a28 <__ssvfiscanf_r+0x7c>
 8000b5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	f040 808b 	bne.w	8000c7a <__ssvfiscanf_r+0x2ce>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b68:	e08b      	b.n	8000c82 <__ssvfiscanf_r+0x2d6>
 8000b6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000b6c:	f042 0220 	orr.w	r2, r2, #32
 8000b70:	9241      	str	r2, [sp, #260]	@ 0x104
 8000b72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b78:	9241      	str	r2, [sp, #260]	@ 0x104
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000b7e:	9242      	str	r2, [sp, #264]	@ 0x108
 8000b80:	d902      	bls.n	8000b88 <__ssvfiscanf_r+0x1dc>
 8000b82:	e005      	b.n	8000b90 <__ssvfiscanf_r+0x1e4>
 8000b84:	2300      	movs	r3, #0
 8000b86:	9342      	str	r3, [sp, #264]	@ 0x108
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e002      	b.n	8000b92 <__ssvfiscanf_r+0x1e6>
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000b90:	2304      	movs	r3, #4
 8000b92:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dd39      	ble.n	8000c0e <__ssvfiscanf_r+0x262>
 8000b9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000b9c:	0659      	lsls	r1, r3, #25
 8000b9e:	d404      	bmi.n	8000baa <__ssvfiscanf_r+0x1fe>
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	5cba      	ldrb	r2, [r7, r2]
 8000ba6:	0712      	lsls	r2, r2, #28
 8000ba8:	d438      	bmi.n	8000c1c <__ssvfiscanf_r+0x270>
 8000baa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	dc47      	bgt.n	8000c40 <__ssvfiscanf_r+0x294>
 8000bb0:	466b      	mov	r3, sp
 8000bb2:	4622      	mov	r2, r4
 8000bb4:	a941      	add	r1, sp, #260	@ 0x104
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	f000 f86c 	bl	8000c94 <_scanf_chars>
 8000bbc:	2801      	cmp	r0, #1
 8000bbe:	d064      	beq.n	8000c8a <__ssvfiscanf_r+0x2de>
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	f47f af18 	bne.w	80009f6 <__ssvfiscanf_r+0x4a>
 8000bc6:	e7c9      	b.n	8000b5c <__ssvfiscanf_r+0x1b0>
 8000bc8:	220a      	movs	r2, #10
 8000bca:	e7d7      	b.n	8000b7c <__ssvfiscanf_r+0x1d0>
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f000 f9ae 	bl	8000f30 <__sccl>
 8000bd4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bda:	9341      	str	r3, [sp, #260]	@ 0x104
 8000bdc:	4605      	mov	r5, r0
 8000bde:	2301      	movs	r3, #1
 8000be0:	e7d7      	b.n	8000b92 <__ssvfiscanf_r+0x1e6>
 8000be2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be8:	9341      	str	r3, [sp, #260]	@ 0x104
 8000bea:	2300      	movs	r3, #0
 8000bec:	e7d1      	b.n	8000b92 <__ssvfiscanf_r+0x1e6>
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e7cf      	b.n	8000b92 <__ssvfiscanf_r+0x1e6>
 8000bf2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000bf4:	06c3      	lsls	r3, r0, #27
 8000bf6:	f53f aefe 	bmi.w	80009f6 <__ssvfiscanf_r+0x4a>
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000bfe:	1d19      	adds	r1, r3, #4
 8000c00:	9100      	str	r1, [sp, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	07c0      	lsls	r0, r0, #31
 8000c06:	bf4c      	ite	mi
 8000c08:	801a      	strhmi	r2, [r3, #0]
 8000c0a:	601a      	strpl	r2, [r3, #0]
 8000c0c:	e6f3      	b.n	80009f6 <__ssvfiscanf_r+0x4a>
 8000c0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000c10:	4621      	mov	r1, r4
 8000c12:	4630      	mov	r0, r6
 8000c14:	4798      	blx	r3
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d0bf      	beq.n	8000b9a <__ssvfiscanf_r+0x1ee>
 8000c1a:	e79f      	b.n	8000b5c <__ssvfiscanf_r+0x1b0>
 8000c1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000c1e:	3201      	adds	r2, #1
 8000c20:	9245      	str	r2, [sp, #276]	@ 0x114
 8000c22:	6862      	ldr	r2, [r4, #4]
 8000c24:	3a01      	subs	r2, #1
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	6062      	str	r2, [r4, #4]
 8000c2a:	dd02      	ble.n	8000c32 <__ssvfiscanf_r+0x286>
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	6023      	str	r3, [r4, #0]
 8000c30:	e7b6      	b.n	8000ba0 <__ssvfiscanf_r+0x1f4>
 8000c32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000c34:	4621      	mov	r1, r4
 8000c36:	4630      	mov	r0, r6
 8000c38:	4798      	blx	r3
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d0b0      	beq.n	8000ba0 <__ssvfiscanf_r+0x1f4>
 8000c3e:	e78d      	b.n	8000b5c <__ssvfiscanf_r+0x1b0>
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	dc0f      	bgt.n	8000c64 <__ssvfiscanf_r+0x2b8>
 8000c44:	466b      	mov	r3, sp
 8000c46:	4622      	mov	r2, r4
 8000c48:	a941      	add	r1, sp, #260	@ 0x104
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f000 f87c 	bl	8000d48 <_scanf_i>
 8000c50:	e7b4      	b.n	8000bbc <__ssvfiscanf_r+0x210>
 8000c52:	bf00      	nop
 8000c54:	080008fd 	.word	0x080008fd
 8000c58:	08000973 	.word	0x08000973
 8000c5c:	08001388 	.word	0x08001388
 8000c60:	08001368 	.word	0x08001368
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <__ssvfiscanf_r+0x2e4>)
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f43f aec5 	beq.w	80009f6 <__ssvfiscanf_r+0x4a>
 8000c6c:	466b      	mov	r3, sp
 8000c6e:	4622      	mov	r2, r4
 8000c70:	a941      	add	r1, sp, #260	@ 0x104
 8000c72:	4630      	mov	r0, r6
 8000c74:	f3af 8000 	nop.w
 8000c78:	e7a0      	b.n	8000bbc <__ssvfiscanf_r+0x210>
 8000c7a:	89a3      	ldrh	r3, [r4, #12]
 8000c7c:	065b      	lsls	r3, r3, #25
 8000c7e:	f53f af71 	bmi.w	8000b64 <__ssvfiscanf_r+0x1b8>
 8000c82:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000c8c:	e7f9      	b.n	8000c82 <__ssvfiscanf_r+0x2d6>
 8000c8e:	bf00      	nop
 8000c90:	00000000 	.word	0x00000000

08000c94 <_scanf_chars>:
 8000c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c98:	4615      	mov	r5, r2
 8000c9a:	688a      	ldr	r2, [r1, #8]
 8000c9c:	4680      	mov	r8, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	b932      	cbnz	r2, 8000cb0 <_scanf_chars+0x1c>
 8000ca2:	698a      	ldr	r2, [r1, #24]
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8000cac:	2201      	moveq	r2, #1
 8000cae:	608a      	str	r2, [r1, #8]
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000d44 <_scanf_chars+0xb0>
 8000cb6:	06d1      	lsls	r1, r2, #27
 8000cb8:	bf5f      	itttt	pl
 8000cba:	681a      	ldrpl	r2, [r3, #0]
 8000cbc:	1d11      	addpl	r1, r2, #4
 8000cbe:	6019      	strpl	r1, [r3, #0]
 8000cc0:	6816      	ldrpl	r6, [r2, #0]
 8000cc2:	2700      	movs	r7, #0
 8000cc4:	69a0      	ldr	r0, [r4, #24]
 8000cc6:	b188      	cbz	r0, 8000cec <_scanf_chars+0x58>
 8000cc8:	2801      	cmp	r0, #1
 8000cca:	d107      	bne.n	8000cdc <_scanf_chars+0x48>
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	6963      	ldr	r3, [r4, #20]
 8000cd2:	5c9b      	ldrb	r3, [r3, r2]
 8000cd4:	b953      	cbnz	r3, 8000cec <_scanf_chars+0x58>
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	d031      	beq.n	8000d3e <_scanf_chars+0xaa>
 8000cda:	e022      	b.n	8000d22 <_scanf_chars+0x8e>
 8000cdc:	2802      	cmp	r0, #2
 8000cde:	d120      	bne.n	8000d22 <_scanf_chars+0x8e>
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8000ce8:	071b      	lsls	r3, r3, #28
 8000cea:	d41a      	bmi.n	8000d22 <_scanf_chars+0x8e>
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	06da      	lsls	r2, r3, #27
 8000cf0:	bf5e      	ittt	pl
 8000cf2:	682b      	ldrpl	r3, [r5, #0]
 8000cf4:	781b      	ldrbpl	r3, [r3, #0]
 8000cf6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000cfa:	682a      	ldr	r2, [r5, #0]
 8000cfc:	686b      	ldr	r3, [r5, #4]
 8000cfe:	3201      	adds	r2, #1
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	68a2      	ldr	r2, [r4, #8]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	3a01      	subs	r2, #1
 8000d08:	606b      	str	r3, [r5, #4]
 8000d0a:	3701      	adds	r7, #1
 8000d0c:	60a2      	str	r2, [r4, #8]
 8000d0e:	b142      	cbz	r2, 8000d22 <_scanf_chars+0x8e>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dcd7      	bgt.n	8000cc4 <_scanf_chars+0x30>
 8000d14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000d18:	4629      	mov	r1, r5
 8000d1a:	4640      	mov	r0, r8
 8000d1c:	4798      	blx	r3
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d0d0      	beq.n	8000cc4 <_scanf_chars+0x30>
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	f013 0310 	ands.w	r3, r3, #16
 8000d28:	d105      	bne.n	8000d36 <_scanf_chars+0xa2>
 8000d2a:	68e2      	ldr	r2, [r4, #12]
 8000d2c:	3201      	adds	r2, #1
 8000d2e:	60e2      	str	r2, [r4, #12]
 8000d30:	69a2      	ldr	r2, [r4, #24]
 8000d32:	b102      	cbz	r2, 8000d36 <_scanf_chars+0xa2>
 8000d34:	7033      	strb	r3, [r6, #0]
 8000d36:	6923      	ldr	r3, [r4, #16]
 8000d38:	443b      	add	r3, r7
 8000d3a:	6123      	str	r3, [r4, #16]
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d42:	bf00      	nop
 8000d44:	08001388 	.word	0x08001388

08000d48 <_scanf_i>:
 8000d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	4b74      	ldr	r3, [pc, #464]	@ (8000f20 <_scanf_i+0x1d8>)
 8000d50:	460c      	mov	r4, r1
 8000d52:	4682      	mov	sl, r0
 8000d54:	4616      	mov	r6, r2
 8000d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	ab03      	add	r3, sp, #12
 8000d5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d62:	4b70      	ldr	r3, [pc, #448]	@ (8000f24 <_scanf_i+0x1dc>)
 8000d64:	69a1      	ldr	r1, [r4, #24]
 8000d66:	4a70      	ldr	r2, [pc, #448]	@ (8000f28 <_scanf_i+0x1e0>)
 8000d68:	2903      	cmp	r1, #3
 8000d6a:	bf08      	it	eq
 8000d6c:	461a      	moveq	r2, r3
 8000d6e:	68a3      	ldr	r3, [r4, #8]
 8000d70:	9201      	str	r2, [sp, #4]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8000d78:	bf88      	it	hi
 8000d7a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8000d7e:	4627      	mov	r7, r4
 8000d80:	bf82      	ittt	hi
 8000d82:	eb03 0905 	addhi.w	r9, r3, r5
 8000d86:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8000d8a:	60a3      	strhi	r3, [r4, #8]
 8000d8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000d90:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8000d94:	bf98      	it	ls
 8000d96:	f04f 0900 	movls.w	r9, #0
 8000d9a:	6023      	str	r3, [r4, #0]
 8000d9c:	463d      	mov	r5, r7
 8000d9e:	f04f 0b00 	mov.w	fp, #0
 8000da2:	6831      	ldr	r1, [r6, #0]
 8000da4:	ab03      	add	r3, sp, #12
 8000da6:	7809      	ldrb	r1, [r1, #0]
 8000da8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000dac:	2202      	movs	r2, #2
 8000dae:	f7ff fa17 	bl	80001e0 <memchr>
 8000db2:	b328      	cbz	r0, 8000e00 <_scanf_i+0xb8>
 8000db4:	f1bb 0f01 	cmp.w	fp, #1
 8000db8:	d159      	bne.n	8000e6e <_scanf_i+0x126>
 8000dba:	6862      	ldr	r2, [r4, #4]
 8000dbc:	b92a      	cbnz	r2, 8000dca <_scanf_i+0x82>
 8000dbe:	6822      	ldr	r2, [r4, #0]
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000dc6:	6061      	str	r1, [r4, #4]
 8000dc8:	6022      	str	r2, [r4, #0]
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8000dd0:	6022      	str	r2, [r4, #0]
 8000dd2:	68a2      	ldr	r2, [r4, #8]
 8000dd4:	1e51      	subs	r1, r2, #1
 8000dd6:	60a1      	str	r1, [r4, #8]
 8000dd8:	b192      	cbz	r2, 8000e00 <_scanf_i+0xb8>
 8000dda:	6832      	ldr	r2, [r6, #0]
 8000ddc:	1c51      	adds	r1, r2, #1
 8000dde:	6031      	str	r1, [r6, #0]
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	f805 2b01 	strb.w	r2, [r5], #1
 8000de6:	6872      	ldr	r2, [r6, #4]
 8000de8:	3a01      	subs	r2, #1
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	6072      	str	r2, [r6, #4]
 8000dee:	dc07      	bgt.n	8000e00 <_scanf_i+0xb8>
 8000df0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8000df4:	4631      	mov	r1, r6
 8000df6:	4650      	mov	r0, sl
 8000df8:	4790      	blx	r2
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	f040 8085 	bne.w	8000f0a <_scanf_i+0x1c2>
 8000e00:	f10b 0b01 	add.w	fp, fp, #1
 8000e04:	f1bb 0f03 	cmp.w	fp, #3
 8000e08:	d1cb      	bne.n	8000da2 <_scanf_i+0x5a>
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	b90b      	cbnz	r3, 8000e12 <_scanf_i+0xca>
 8000e0e:	230a      	movs	r3, #10
 8000e10:	6063      	str	r3, [r4, #4]
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	4945      	ldr	r1, [pc, #276]	@ (8000f2c <_scanf_i+0x1e4>)
 8000e16:	6960      	ldr	r0, [r4, #20]
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	f000 f889 	bl	8000f30 <__sccl>
 8000e1e:	f04f 0b00 	mov.w	fp, #0
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	6822      	ldr	r2, [r4, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d03d      	beq.n	8000ea6 <_scanf_i+0x15e>
 8000e2a:	6831      	ldr	r1, [r6, #0]
 8000e2c:	6960      	ldr	r0, [r4, #20]
 8000e2e:	f891 c000 	ldrb.w	ip, [r1]
 8000e32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d035      	beq.n	8000ea6 <_scanf_i+0x15e>
 8000e3a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8000e3e:	d124      	bne.n	8000e8a <_scanf_i+0x142>
 8000e40:	0510      	lsls	r0, r2, #20
 8000e42:	d522      	bpl.n	8000e8a <_scanf_i+0x142>
 8000e44:	f10b 0b01 	add.w	fp, fp, #1
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	d003      	beq.n	8000e56 <_scanf_i+0x10e>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000e54:	60a3      	str	r3, [r4, #8]
 8000e56:	6873      	ldr	r3, [r6, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	6073      	str	r3, [r6, #4]
 8000e5e:	dd1b      	ble.n	8000e98 <_scanf_i+0x150>
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	6033      	str	r3, [r6, #0]
 8000e66:	68a3      	ldr	r3, [r4, #8]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	60a3      	str	r3, [r4, #8]
 8000e6c:	e7d9      	b.n	8000e22 <_scanf_i+0xda>
 8000e6e:	f1bb 0f02 	cmp.w	fp, #2
 8000e72:	d1ae      	bne.n	8000dd2 <_scanf_i+0x8a>
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8000e7a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8000e7e:	d1bf      	bne.n	8000e00 <_scanf_i+0xb8>
 8000e80:	2110      	movs	r1, #16
 8000e82:	6061      	str	r1, [r4, #4]
 8000e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e88:	e7a2      	b.n	8000dd0 <_scanf_i+0x88>
 8000e8a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8000e8e:	6022      	str	r2, [r4, #0]
 8000e90:	780b      	ldrb	r3, [r1, #0]
 8000e92:	f805 3b01 	strb.w	r3, [r5], #1
 8000e96:	e7de      	b.n	8000e56 <_scanf_i+0x10e>
 8000e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	4798      	blx	r3
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d0df      	beq.n	8000e66 <_scanf_i+0x11e>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	05d9      	lsls	r1, r3, #23
 8000eaa:	d50d      	bpl.n	8000ec8 <_scanf_i+0x180>
 8000eac:	42bd      	cmp	r5, r7
 8000eae:	d909      	bls.n	8000ec4 <_scanf_i+0x17c>
 8000eb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8000eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8000eb8:	4632      	mov	r2, r6
 8000eba:	4650      	mov	r0, sl
 8000ebc:	4798      	blx	r3
 8000ebe:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8000ec2:	464d      	mov	r5, r9
 8000ec4:	42bd      	cmp	r5, r7
 8000ec6:	d028      	beq.n	8000f1a <_scanf_i+0x1d2>
 8000ec8:	6822      	ldr	r2, [r4, #0]
 8000eca:	f012 0210 	ands.w	r2, r2, #16
 8000ece:	d113      	bne.n	8000ef8 <_scanf_i+0x1b0>
 8000ed0:	702a      	strb	r2, [r5, #0]
 8000ed2:	6863      	ldr	r3, [r4, #4]
 8000ed4:	9e01      	ldr	r6, [sp, #4]
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	4650      	mov	r0, sl
 8000eda:	47b0      	blx	r6
 8000edc:	f8d8 3000 	ldr.w	r3, [r8]
 8000ee0:	6821      	ldr	r1, [r4, #0]
 8000ee2:	1d1a      	adds	r2, r3, #4
 8000ee4:	f8c8 2000 	str.w	r2, [r8]
 8000ee8:	f011 0f20 	tst.w	r1, #32
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	d00f      	beq.n	8000f10 <_scanf_i+0x1c8>
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	68e3      	ldr	r3, [r4, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60e3      	str	r3, [r4, #12]
 8000ef8:	6923      	ldr	r3, [r4, #16]
 8000efa:	1bed      	subs	r5, r5, r7
 8000efc:	445d      	add	r5, fp
 8000efe:	442b      	add	r3, r5
 8000f00:	6123      	str	r3, [r4, #16]
 8000f02:	2000      	movs	r0, #0
 8000f04:	b007      	add	sp, #28
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	f04f 0b00 	mov.w	fp, #0
 8000f0e:	e7ca      	b.n	8000ea6 <_scanf_i+0x15e>
 8000f10:	07ca      	lsls	r2, r1, #31
 8000f12:	bf4c      	ite	mi
 8000f14:	8018      	strhmi	r0, [r3, #0]
 8000f16:	6018      	strpl	r0, [r3, #0]
 8000f18:	e7eb      	b.n	8000ef2 <_scanf_i+0x1aa>
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	e7f2      	b.n	8000f04 <_scanf_i+0x1bc>
 8000f1e:	bf00      	nop
 8000f20:	0800135c 	.word	0x0800135c
 8000f24:	080011a5 	.word	0x080011a5
 8000f28:	08001285 	.word	0x08001285
 8000f2c:	0800137c 	.word	0x0800137c

08000f30 <__sccl>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	780b      	ldrb	r3, [r1, #0]
 8000f34:	4604      	mov	r4, r0
 8000f36:	2b5e      	cmp	r3, #94	@ 0x5e
 8000f38:	bf0b      	itete	eq
 8000f3a:	784b      	ldrbeq	r3, [r1, #1]
 8000f3c:	1c4a      	addne	r2, r1, #1
 8000f3e:	1c8a      	addeq	r2, r1, #2
 8000f40:	2100      	movne	r1, #0
 8000f42:	bf08      	it	eq
 8000f44:	2101      	moveq	r1, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8000f4c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8000f50:	42a8      	cmp	r0, r5
 8000f52:	d1fb      	bne.n	8000f4c <__sccl+0x1c>
 8000f54:	b90b      	cbnz	r3, 8000f5a <__sccl+0x2a>
 8000f56:	1e50      	subs	r0, r2, #1
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	f081 0101 	eor.w	r1, r1, #1
 8000f5e:	54e1      	strb	r1, [r4, r3]
 8000f60:	4610      	mov	r0, r2
 8000f62:	4602      	mov	r2, r0
 8000f64:	f812 5b01 	ldrb.w	r5, [r2], #1
 8000f68:	2d2d      	cmp	r5, #45	@ 0x2d
 8000f6a:	d005      	beq.n	8000f78 <__sccl+0x48>
 8000f6c:	2d5d      	cmp	r5, #93	@ 0x5d
 8000f6e:	d016      	beq.n	8000f9e <__sccl+0x6e>
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	d0f1      	beq.n	8000f58 <__sccl+0x28>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e7f2      	b.n	8000f5e <__sccl+0x2e>
 8000f78:	7846      	ldrb	r6, [r0, #1]
 8000f7a:	2e5d      	cmp	r6, #93	@ 0x5d
 8000f7c:	d0fa      	beq.n	8000f74 <__sccl+0x44>
 8000f7e:	42b3      	cmp	r3, r6
 8000f80:	dcf8      	bgt.n	8000f74 <__sccl+0x44>
 8000f82:	3002      	adds	r0, #2
 8000f84:	461a      	mov	r2, r3
 8000f86:	3201      	adds	r2, #1
 8000f88:	4296      	cmp	r6, r2
 8000f8a:	54a1      	strb	r1, [r4, r2]
 8000f8c:	dcfb      	bgt.n	8000f86 <__sccl+0x56>
 8000f8e:	1af2      	subs	r2, r6, r3
 8000f90:	3a01      	subs	r2, #1
 8000f92:	1c5d      	adds	r5, r3, #1
 8000f94:	42b3      	cmp	r3, r6
 8000f96:	bfa8      	it	ge
 8000f98:	2200      	movge	r2, #0
 8000f9a:	18ab      	adds	r3, r5, r2
 8000f9c:	e7e1      	b.n	8000f62 <__sccl+0x32>
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	e7da      	b.n	8000f58 <__sccl+0x28>

08000fa2 <__submore>:
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000faa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d11d      	bne.n	8000fee <__submore+0x4c>
 8000fb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb6:	f7ff fc15 	bl	80007e4 <_malloc_r>
 8000fba:	b918      	cbnz	r0, 8000fc4 <__submore+0x22>
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000fca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8000fce:	6360      	str	r0, [r4, #52]	@ 0x34
 8000fd0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8000fd4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8000fd8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8000fdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8000fe0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8000fe4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8000fe8:	6020      	str	r0, [r4, #0]
 8000fea:	2000      	movs	r0, #0
 8000fec:	e7e8      	b.n	8000fc0 <__submore+0x1e>
 8000fee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8000ff0:	0077      	lsls	r7, r6, #1
 8000ff2:	463a      	mov	r2, r7
 8000ff4:	f000 f82e 	bl	8001054 <_realloc_r>
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d0de      	beq.n	8000fbc <__submore+0x1a>
 8000ffe:	eb00 0806 	add.w	r8, r0, r6
 8001002:	4601      	mov	r1, r0
 8001004:	4632      	mov	r2, r6
 8001006:	4640      	mov	r0, r8
 8001008:	f000 f816 	bl	8001038 <memcpy>
 800100c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8001010:	f8c4 8000 	str.w	r8, [r4]
 8001014:	e7e9      	b.n	8000fea <__submore+0x48>
	...

08001018 <_sbrk_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	@ (8001034 <_sbrk_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff f9ec 	bl	8000400 <_sbrk>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_sbrk_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_sbrk_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200001a8 	.word	0x200001a8

08001038 <memcpy>:
 8001038:	440a      	add	r2, r1
 800103a:	4291      	cmp	r1, r2
 800103c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001040:	d100      	bne.n	8001044 <memcpy+0xc>
 8001042:	4770      	bx	lr
 8001044:	b510      	push	{r4, lr}
 8001046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800104a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800104e:	4291      	cmp	r1, r2
 8001050:	d1f9      	bne.n	8001046 <memcpy+0xe>
 8001052:	bd10      	pop	{r4, pc}

08001054 <_realloc_r>:
 8001054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001058:	4680      	mov	r8, r0
 800105a:	4615      	mov	r5, r2
 800105c:	460c      	mov	r4, r1
 800105e:	b921      	cbnz	r1, 800106a <_realloc_r+0x16>
 8001060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	4611      	mov	r1, r2
 8001066:	f7ff bbbd 	b.w	80007e4 <_malloc_r>
 800106a:	b92a      	cbnz	r2, 8001078 <_realloc_r+0x24>
 800106c:	f7ff fb4e 	bl	800070c <_free_r>
 8001070:	2400      	movs	r4, #0
 8001072:	4620      	mov	r0, r4
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001078:	f000 f906 	bl	8001288 <_malloc_usable_size_r>
 800107c:	4285      	cmp	r5, r0
 800107e:	4606      	mov	r6, r0
 8001080:	d802      	bhi.n	8001088 <_realloc_r+0x34>
 8001082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001086:	d8f4      	bhi.n	8001072 <_realloc_r+0x1e>
 8001088:	4629      	mov	r1, r5
 800108a:	4640      	mov	r0, r8
 800108c:	f7ff fbaa 	bl	80007e4 <_malloc_r>
 8001090:	4607      	mov	r7, r0
 8001092:	2800      	cmp	r0, #0
 8001094:	d0ec      	beq.n	8001070 <_realloc_r+0x1c>
 8001096:	42b5      	cmp	r5, r6
 8001098:	462a      	mov	r2, r5
 800109a:	4621      	mov	r1, r4
 800109c:	bf28      	it	cs
 800109e:	4632      	movcs	r2, r6
 80010a0:	f7ff ffca 	bl	8001038 <memcpy>
 80010a4:	4621      	mov	r1, r4
 80010a6:	4640      	mov	r0, r8
 80010a8:	f7ff fb30 	bl	800070c <_free_r>
 80010ac:	463c      	mov	r4, r7
 80010ae:	e7e0      	b.n	8001072 <_realloc_r+0x1e>

080010b0 <_strtol_l.constprop.0>:
 80010b0:	2b24      	cmp	r3, #36	@ 0x24
 80010b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b6:	4686      	mov	lr, r0
 80010b8:	4690      	mov	r8, r2
 80010ba:	d801      	bhi.n	80010c0 <_strtol_l.constprop.0+0x10>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <_strtol_l.constprop.0+0x1e>
 80010c0:	f7ff faf8 	bl	80006b4 <__errno>
 80010c4:	2316      	movs	r3, #22
 80010c6:	6003      	str	r3, [r0, #0]
 80010c8:	2000      	movs	r0, #0
 80010ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ce:	4834      	ldr	r0, [pc, #208]	@ (80011a0 <_strtol_l.constprop.0+0xf0>)
 80010d0:	460d      	mov	r5, r1
 80010d2:	462a      	mov	r2, r5
 80010d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80010d8:	5d06      	ldrb	r6, [r0, r4]
 80010da:	f016 0608 	ands.w	r6, r6, #8
 80010de:	d1f8      	bne.n	80010d2 <_strtol_l.constprop.0+0x22>
 80010e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80010e2:	d12d      	bne.n	8001140 <_strtol_l.constprop.0+0x90>
 80010e4:	782c      	ldrb	r4, [r5, #0]
 80010e6:	2601      	movs	r6, #1
 80010e8:	1c95      	adds	r5, r2, #2
 80010ea:	f033 0210 	bics.w	r2, r3, #16
 80010ee:	d109      	bne.n	8001104 <_strtol_l.constprop.0+0x54>
 80010f0:	2c30      	cmp	r4, #48	@ 0x30
 80010f2:	d12a      	bne.n	800114a <_strtol_l.constprop.0+0x9a>
 80010f4:	782a      	ldrb	r2, [r5, #0]
 80010f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80010fa:	2a58      	cmp	r2, #88	@ 0x58
 80010fc:	d125      	bne.n	800114a <_strtol_l.constprop.0+0x9a>
 80010fe:	786c      	ldrb	r4, [r5, #1]
 8001100:	2310      	movs	r3, #16
 8001102:	3502      	adds	r5, #2
 8001104:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001108:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800110c:	2200      	movs	r2, #0
 800110e:	fbbc f9f3 	udiv	r9, ip, r3
 8001112:	4610      	mov	r0, r2
 8001114:	fb03 ca19 	mls	sl, r3, r9, ip
 8001118:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800111c:	2f09      	cmp	r7, #9
 800111e:	d81b      	bhi.n	8001158 <_strtol_l.constprop.0+0xa8>
 8001120:	463c      	mov	r4, r7
 8001122:	42a3      	cmp	r3, r4
 8001124:	dd27      	ble.n	8001176 <_strtol_l.constprop.0+0xc6>
 8001126:	1c57      	adds	r7, r2, #1
 8001128:	d007      	beq.n	800113a <_strtol_l.constprop.0+0x8a>
 800112a:	4581      	cmp	r9, r0
 800112c:	d320      	bcc.n	8001170 <_strtol_l.constprop.0+0xc0>
 800112e:	d101      	bne.n	8001134 <_strtol_l.constprop.0+0x84>
 8001130:	45a2      	cmp	sl, r4
 8001132:	db1d      	blt.n	8001170 <_strtol_l.constprop.0+0xc0>
 8001134:	fb00 4003 	mla	r0, r0, r3, r4
 8001138:	2201      	movs	r2, #1
 800113a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800113e:	e7eb      	b.n	8001118 <_strtol_l.constprop.0+0x68>
 8001140:	2c2b      	cmp	r4, #43	@ 0x2b
 8001142:	bf04      	itt	eq
 8001144:	782c      	ldrbeq	r4, [r5, #0]
 8001146:	1c95      	addeq	r5, r2, #2
 8001148:	e7cf      	b.n	80010ea <_strtol_l.constprop.0+0x3a>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1da      	bne.n	8001104 <_strtol_l.constprop.0+0x54>
 800114e:	2c30      	cmp	r4, #48	@ 0x30
 8001150:	bf0c      	ite	eq
 8001152:	2308      	moveq	r3, #8
 8001154:	230a      	movne	r3, #10
 8001156:	e7d5      	b.n	8001104 <_strtol_l.constprop.0+0x54>
 8001158:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800115c:	2f19      	cmp	r7, #25
 800115e:	d801      	bhi.n	8001164 <_strtol_l.constprop.0+0xb4>
 8001160:	3c37      	subs	r4, #55	@ 0x37
 8001162:	e7de      	b.n	8001122 <_strtol_l.constprop.0+0x72>
 8001164:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001168:	2f19      	cmp	r7, #25
 800116a:	d804      	bhi.n	8001176 <_strtol_l.constprop.0+0xc6>
 800116c:	3c57      	subs	r4, #87	@ 0x57
 800116e:	e7d8      	b.n	8001122 <_strtol_l.constprop.0+0x72>
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001174:	e7e1      	b.n	800113a <_strtol_l.constprop.0+0x8a>
 8001176:	1c53      	adds	r3, r2, #1
 8001178:	d108      	bne.n	800118c <_strtol_l.constprop.0+0xdc>
 800117a:	2322      	movs	r3, #34	@ 0x22
 800117c:	f8ce 3000 	str.w	r3, [lr]
 8001180:	4660      	mov	r0, ip
 8001182:	f1b8 0f00 	cmp.w	r8, #0
 8001186:	d0a0      	beq.n	80010ca <_strtol_l.constprop.0+0x1a>
 8001188:	1e69      	subs	r1, r5, #1
 800118a:	e006      	b.n	800119a <_strtol_l.constprop.0+0xea>
 800118c:	b106      	cbz	r6, 8001190 <_strtol_l.constprop.0+0xe0>
 800118e:	4240      	negs	r0, r0
 8001190:	f1b8 0f00 	cmp.w	r8, #0
 8001194:	d099      	beq.n	80010ca <_strtol_l.constprop.0+0x1a>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d1f6      	bne.n	8001188 <_strtol_l.constprop.0+0xd8>
 800119a:	f8c8 1000 	str.w	r1, [r8]
 800119e:	e794      	b.n	80010ca <_strtol_l.constprop.0+0x1a>
 80011a0:	08001388 	.word	0x08001388

080011a4 <_strtol_r>:
 80011a4:	f7ff bf84 	b.w	80010b0 <_strtol_l.constprop.0>

080011a8 <_strtoul_l.constprop.0>:
 80011a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ac:	4e34      	ldr	r6, [pc, #208]	@ (8001280 <_strtoul_l.constprop.0+0xd8>)
 80011ae:	4686      	mov	lr, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	4628      	mov	r0, r5
 80011b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011b8:	5d37      	ldrb	r7, [r6, r4]
 80011ba:	f017 0708 	ands.w	r7, r7, #8
 80011be:	d1f8      	bne.n	80011b2 <_strtoul_l.constprop.0+0xa>
 80011c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80011c2:	d12f      	bne.n	8001224 <_strtoul_l.constprop.0+0x7c>
 80011c4:	782c      	ldrb	r4, [r5, #0]
 80011c6:	2701      	movs	r7, #1
 80011c8:	1c85      	adds	r5, r0, #2
 80011ca:	f033 0010 	bics.w	r0, r3, #16
 80011ce:	d109      	bne.n	80011e4 <_strtoul_l.constprop.0+0x3c>
 80011d0:	2c30      	cmp	r4, #48	@ 0x30
 80011d2:	d12c      	bne.n	800122e <_strtoul_l.constprop.0+0x86>
 80011d4:	7828      	ldrb	r0, [r5, #0]
 80011d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80011da:	2858      	cmp	r0, #88	@ 0x58
 80011dc:	d127      	bne.n	800122e <_strtoul_l.constprop.0+0x86>
 80011de:	786c      	ldrb	r4, [r5, #1]
 80011e0:	2310      	movs	r3, #16
 80011e2:	3502      	adds	r5, #2
 80011e4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80011e8:	2600      	movs	r6, #0
 80011ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80011ee:	fb03 f908 	mul.w	r9, r3, r8
 80011f2:	ea6f 0909 	mvn.w	r9, r9
 80011f6:	4630      	mov	r0, r6
 80011f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80011fc:	f1bc 0f09 	cmp.w	ip, #9
 8001200:	d81c      	bhi.n	800123c <_strtoul_l.constprop.0+0x94>
 8001202:	4664      	mov	r4, ip
 8001204:	42a3      	cmp	r3, r4
 8001206:	dd2a      	ble.n	800125e <_strtoul_l.constprop.0+0xb6>
 8001208:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800120c:	d007      	beq.n	800121e <_strtoul_l.constprop.0+0x76>
 800120e:	4580      	cmp	r8, r0
 8001210:	d322      	bcc.n	8001258 <_strtoul_l.constprop.0+0xb0>
 8001212:	d101      	bne.n	8001218 <_strtoul_l.constprop.0+0x70>
 8001214:	45a1      	cmp	r9, r4
 8001216:	db1f      	blt.n	8001258 <_strtoul_l.constprop.0+0xb0>
 8001218:	fb00 4003 	mla	r0, r0, r3, r4
 800121c:	2601      	movs	r6, #1
 800121e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001222:	e7e9      	b.n	80011f8 <_strtoul_l.constprop.0+0x50>
 8001224:	2c2b      	cmp	r4, #43	@ 0x2b
 8001226:	bf04      	itt	eq
 8001228:	782c      	ldrbeq	r4, [r5, #0]
 800122a:	1c85      	addeq	r5, r0, #2
 800122c:	e7cd      	b.n	80011ca <_strtoul_l.constprop.0+0x22>
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1d8      	bne.n	80011e4 <_strtoul_l.constprop.0+0x3c>
 8001232:	2c30      	cmp	r4, #48	@ 0x30
 8001234:	bf0c      	ite	eq
 8001236:	2308      	moveq	r3, #8
 8001238:	230a      	movne	r3, #10
 800123a:	e7d3      	b.n	80011e4 <_strtoul_l.constprop.0+0x3c>
 800123c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001240:	f1bc 0f19 	cmp.w	ip, #25
 8001244:	d801      	bhi.n	800124a <_strtoul_l.constprop.0+0xa2>
 8001246:	3c37      	subs	r4, #55	@ 0x37
 8001248:	e7dc      	b.n	8001204 <_strtoul_l.constprop.0+0x5c>
 800124a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800124e:	f1bc 0f19 	cmp.w	ip, #25
 8001252:	d804      	bhi.n	800125e <_strtoul_l.constprop.0+0xb6>
 8001254:	3c57      	subs	r4, #87	@ 0x57
 8001256:	e7d5      	b.n	8001204 <_strtoul_l.constprop.0+0x5c>
 8001258:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800125c:	e7df      	b.n	800121e <_strtoul_l.constprop.0+0x76>
 800125e:	1c73      	adds	r3, r6, #1
 8001260:	d106      	bne.n	8001270 <_strtoul_l.constprop.0+0xc8>
 8001262:	2322      	movs	r3, #34	@ 0x22
 8001264:	f8ce 3000 	str.w	r3, [lr]
 8001268:	4630      	mov	r0, r6
 800126a:	b932      	cbnz	r2, 800127a <_strtoul_l.constprop.0+0xd2>
 800126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001270:	b107      	cbz	r7, 8001274 <_strtoul_l.constprop.0+0xcc>
 8001272:	4240      	negs	r0, r0
 8001274:	2a00      	cmp	r2, #0
 8001276:	d0f9      	beq.n	800126c <_strtoul_l.constprop.0+0xc4>
 8001278:	b106      	cbz	r6, 800127c <_strtoul_l.constprop.0+0xd4>
 800127a:	1e69      	subs	r1, r5, #1
 800127c:	6011      	str	r1, [r2, #0]
 800127e:	e7f5      	b.n	800126c <_strtoul_l.constprop.0+0xc4>
 8001280:	08001388 	.word	0x08001388

08001284 <_strtoul_r>:
 8001284:	f7ff bf90 	b.w	80011a8 <_strtoul_l.constprop.0>

08001288 <_malloc_usable_size_r>:
 8001288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800128c:	1f18      	subs	r0, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfbc      	itt	lt
 8001292:	580b      	ldrlt	r3, [r1, r0]
 8001294:	18c0      	addlt	r0, r0, r3
 8001296:	4770      	bx	lr

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
